import pandas as pd
from collections import OrderedDict
from tqdm import tqdm
from pathlib import Path


CUR_PATH = Path(__file__).resolve().parent
OUTPUT_PATH = Path(CUR_PATH, "data")


def h_rec(rec):

    record = OrderedDict()

{% for item in household %}
    {{ item }}{% endfor %}

    return record


def f_rec(rec):
    """
    Process family record in CPS
    """

    record = OrderedDict()

{% for item in family %}
    {{ item }}{% endfor %}

    return record


def p_rec(rec):
    """
    Process person record in CPS
    """
    record = OrderedDict()

{% for item in person %}
    {{ item }}{% endfor %}

    return record


def create_cps(dat_file, year, export=True):
    """
    Convert a .DAT copy of the CPS to a CSV
    """

    # read in file
    print("Reading DAT file")
    with Path(dat_file).open("r") as f:
        cps = [line.strip() for line in f.readlines()]

    # list to hold the records
    cps_list = []
    print("Creating Records")
    for record in tqdm(cps, desc=year):
        rec_type = record[0]
        # household records
        if rec_type == "1":
            household = h_rec(record)
        # family record
        elif rec_type == "2":
            family = f_rec(record)
        # person record
        elif rec_type == "3":
            person = p_rec(record)
            full_rec = {**household, **family, **person}
            cps_list.append(full_rec)

    print("Converting to DataFrame")
    cpsmar = pd.DataFrame(cps_list).fillna(0)
    if export:
        print("Exporting")
        export_path = Path(OUTPUT_PATH, f"cpsmar{year}.csv")
        cpsmar.to_csv(export_path, index=False)

    return cpsmar


if __name__ == "__main__":
    create_cps(Path(CUR_PATH, "data", "{{ file_name }}"), {{ year }})
